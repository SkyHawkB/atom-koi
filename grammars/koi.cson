fileTypes: [
  'koi'
]
scopeName: 'source.koi'
name: 'Koi'
patterns: [
  {
    include: '#comments'
  }
  {
    include: '#keywords'
  }
  {
    include: '#symbols'
  }
  {
    include: '#types'
  }
  {
    include: '#imports'
  }
  {
    include: '#objects'
  }
  {
    include: '#strings'
  }
]
repository:
  comments:
    patterns: [
      {
        name: 'comment.line'
        match: '#[^-].+$'
      }
      {
        name: 'comment.block'
        contentName: 'comment.block'
        begin: '#-'
        beginCaptures:
          0: name: 'comment.block'
        end: '-#'
        endCaptures:
          0: name: 'comment.block'
      }
    ]
  keywords:
    patterns: [
      {
        name: 'keyword.control.koi'
        match: '(?<!\\.)\\b(if|elf|else|when|is)(?!\\s*:)\\b'
      }
      {
        name: 'keyword.definition.koi'
        match: '(?<!\\.)\\b(const var|var)(?!\\s*:)\\b'
      }
      {
        name: 'keyword.control.koi'
        match: '(?<!\\.)\\b(for|while|in|of)(?!\\s*:)\\b'
      }
      {
        name: 'keyword.control.koi'
        match: '(?<!\\.)\\b(break|return)(?!\\s*:)\\b'
      }
      {
        name: 'keyword.class.koi'
        match: '(?<!\\.)\\b(init|meth)(?!\\s*:)\\b'
      }
      {
        match: '\\b(constructor)\\('
        captures:
          1: name: 'entity.function.constructor.name.koi'
      }
      {
        name: 'keyword.native.koi'
        match: '(?<!\\.)\\b(native)(?!\\s*:)\\b'
      }
      {
        match: '(fun|pro|sub) ([A-Za-z_][A-Za-z0-9_]+)'
        captures:
          1: name: 'keyword.function.koi'
          0: name: 'entity.function.name.koi'
      }
      {
        comment: 'functions'
        match: '\\b(call) ([A-Za-z_][A-Za-z0-9_]+)\\('
        captures:
          1: name: 'keyword.function.koi'
          2: name: 'entity.function.name.koi'
      }
      {
        match: '(class|new) ([A-Za-z_][A-Za-z0-9_]+)'
        captures:
          1: name: 'keyword.class.koi'
          0: name: 'entity.class.name.koi'
      }
    ]
  objects:
    patterns: [
      {
        match: '(call) ([A-Za-z_][A-Za-z0-9_]+)\\.([A-Za-z_][A-Za-z0-9_]+)\\('
        captures:
          1: name: 'keyword.function.koi'
          2: name: 'variable.other.property.koi'
          3: name: 'entity.function.name.koi'
      }
      {
        match: '([A-Za-z_][A-Za-z0-9_]+)\\.([A-Za-z_][A-Za-z0-9_]+)'
        captures:
          1: name: 'variable.other.property.koi'
          2: name: 'variable.other.property.koi'
      }
      {
        match: '\\.([A-Za-z_][A-Za-z0-9_]+)[^(]'
        captures:
          1: name: 'variable.other.property.koi'
      }
    ]
  symbols:
    patterns: [
      {
        name: 'keyword.symbol.comparison.koi'
        match: '(<|>|==|!=|<=|>=)'
      }
      {
        name: 'keyword.symbol.koi'
        match: '(:?=)'
      }
      {
        name: 'constant.numeric.koi'
        match: '''(?x)
          (?<!\\$)(?:
            (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1
            (?:\\b[0-9]+(\\.)\\B)|                      # 1.
            (?:\\B(\\.)[0-9]+\\b)|                      # .1
            (?:\\b[0-9]+\\b(?!\\.))                     # 1
          )(?!\\$)
        '''
      }
    ]
  types:
    patterns: [
      {
        comment: 'variables/parameters'
        match: '(: ?)([A-Za-z_][A-Za-z0-9_]+)'
        captures:
          2: name: 'entity.type.name.koi'
      }
      {
        comment: 'functions/methods'
        match: '(->) ?([A-Za-z_][A-Za-z0-9_]+)'
        captures:
          0: name: 'entity.type.name.koi'
          1: name: 'keyword.symbol.koi'
      }
    ]
  imports:
    patterns: [{
        match: '(core|std) (import) (([A-Za-z_][A-Za-z0-9_]+))'
        captures:
          0: name: 'entity.namespace.type.name.koi'
          2: name: 'keyword.import.koi'
          1: name: 'keyword.import.koi'
    }]
  strings:
    patterns: [{
        begin: '"'
        beginCaptures:
          0:
            name: 'punctuation.definition.string.begin.koi'
        end: '"'
        endCaptures:
          0:
            name: 'punctuation.definition.string.end.koi'
        name: 'string.quoted.double.koi'
        patterns: [
          {
            match: '\\\\n'
            name: 'constant.character.escape.koi'
          }
          {
            match: '[^"]*[^\\n\\r"\\\\]$'
            name: 'invalid.illegal.string.koi'
          }
        ]
    }]
