fileTypes: [
  'koi'
]
scopeName: 'source.koi'
name: 'Koi'
patterns: [
  {
    include: '#comments'
  }
  {
    include: '#keywords'
  }
  {
    include: '#symbols'
  }
  {
    include: '#types'
  }
]
repository:
  comments:
    patterns: [
      {
        name: 'comment.line'
        match: '#[^-].+$'
      }
      {
        name: 'comment.block'
        contentName: 'comment.block'
        begin: '#-'
        beginCaptures:
          0: name: 'comment.block'
        end: '-#'
        endCaptures:
          0: name: 'comment.block'
      }
    ]
  keywords:
    patterns: [
      {
        name: 'keyword.control.koi'
        match: '(?<!\\.)\\b(if|elf|else)(?!\\s*:)\\b'
      }
      {
        name: 'keyword.definition.koi'
        match: '(?<!\\.)\\b(val|var)(?!\\s*:)\\b'
      }
      {
        name: 'keyword.control.koi'
        match: '(?<!\\.)\\b(for|while|in|of)(?!\\s*:)\\b'
      }
      {
        name: 'keyword.control.koi'
        match: '(?<!\\.)\\b(break|return)(?!\\s*:)\\b'
      }
      {
        name: 'function.koi'
        match: '(call|fun|pro|sub) ([A-Za-z_][A-Za-z0-9_]+)'
        captures:
          1: name: 'keyword.function.koi'
          0: name: 'entity.function.name.koi'
      }
      {
        name: 'class.koi'
        match: '(class|new) ([A-Za-z_][A-Za-z0-9_]+)'
        captures:
          1: name: 'keyword.class.koi'
          0: name: 'entity.class.name.koi'
      }
    ]
  symbols:
    patterns: [
      {
        name: 'keyword.symbol.koi'
        match: '(:?=)'
      }
      {
        name: 'constant.numeric.koi'
        match: '''(?x)
          (?<!\\$)(?:
            (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1
            (?:\\b[0-9]+(\\.)\\B)|                      # 1.
            (?:\\B(\\.)[0-9]+\\b)|                      # .1
            (?:\\b[0-9]+\\b(?!\\.))                     # 1
          )(?!\\$)
        '''
      }
    ]
  types:
    patterns: [
      {
        comment: 'variables/parameters'
        match: '(: ?)([A-Za-z_][A-Za-z0-9_]+)'
        captures:
          2: name: 'entity.type.name.koi'
      }
      {
        comment: 'functions/methods'
        match: '(->) ?([A-Za-z_][A-Za-z0-9_]+)'
        captures:
          0: name: 'entity.type.name.koi'
          1: name: 'keyword.symbol.koi'
      }
    ]
